extends layout

block content


  .container
    .row  
      Trends
  .container

    .row.border.border-primary.ms-1.mt-1()
      .col
        #plot

  .container.form-group.mt-2
    .row.border.border-primary.strrow.ms-1.form-horizontal()
      .col-3
        select#selTbl1.select.form-select.mt-2.mb-2()
          option() Select Data Source 1
          each val, key in tblObj
            option(value=key) #{val}
      .col-3
        select#selSensor1.select.form-select.d-none.mt-2.mb-2(multiple=true)

      .col-1
      .col-3
        select#selRng.select.form-select.mt-2.mb-2.d-none()
          option(value=null,'disabled') Select Data Range
          each opt of rngLst
            option(value=opt) #{opt} Hours
    .row
      .col.text-center
        #nodata.h2.mt-4

  script.
    $( document ).ready( () => {

      function snsrSelectors(prefx) {
        let lst = []
        for( i=0;i<280;i++) {
          strLbl = Math.floor(i/70) + 1
          trayLbl = i%70 + 1
          if (trayLbl < 10) trayLbl = "0"+trayLbl
          lst[i] = `${prefx}Tray${strLbl}_${trayLbl}`
        }
        return lst
      } 

      // Column names in tables - some inconsistancy attempt to fix later
      var tblFlds = {}
      tblFlds.volts       = snsrSelectors('v')
      tblFlds.temperature = snsrSelectors('t')
      tblFlds.balance     = snsrSelectors('b')
      tblFlds.impedance   = snsrSelectors('r')

      tblFlds.i_prop_str  = [...Array(4).keys()].map( i => 'i_str' + (i) )  // zero based :(
      tblFlds.volts_aux   = [...Array(280).keys()].map( i => 'va' + (i+1) )  
      tblFlds.temperature_aux  = ['aux_cell_temp_1','aux_cell_temp_2','aux_cell_temp_3','aux_cell_temp_4','aux_amb_temp_1','aux_amb_temp_2']
      tblFlds.i_aux  = ['i_aux']
      tblFlds.env = ['batt_h2_1','batt_fire_1','batt_smoke','ee_fire','ee_smoke','machine_fire','machine_smoke','batt_h2_2','batt_fire_2','batt_temp','ee_temp','machine_temp_1','machine_temp_2']
      tblFlds.error_wd = [...Array(8).keys()].map( i => 'error_wd' + (i+1) )

      // Object of functions to build sensors select
      function genFldSelect(tbl) {

        if ( ! tblFlds.hasOwnProperty(tbl) ){
          console.error('No DB Table of that name ',tbl)
          return null
        }

        let sel = $("#selSensor1").empty()
        sel.removeClass( "d-none" ).addClass( "d-block" ) // On page load it is hidden
        sel.append($("<option/>").attr('disabled',true).text("Select Sensors"))
        for( i of tblFlds[tbl] ) {
          sel.append($("<option/>").attr('value',i).text(i))
        }
      } 

      // ----------------------
      // -- Event handlers ----
      // ----------------------
      $("#selTbl1").change( (event) => {
        let tblSelected = $("#selTbl1").val()
        if (tblSelected){
          $("#selRng").removeClass( "d-none" ).addClass( "d-block" )
          genFldSelect(tblSelected)
        }
      })

      $("#selSensor1").change( (event) => {

        let action = {}
        action.tbl = $("#selTbl1").val()
        action.sensor = $("#selSensor1").val()
        action.rng = $("#selRng").val() || 1 
        get_tnd_data(action)
      })      

      $("#selRng").change( (event) => {
        let action = {}
        action.tbl = $("#selTbl1").val()
        action.sensor = $("#selSensor1").val()
        action.rng = $("#selRng").val() || 1
        get_tnd_data(action)
      })

      // ------------------------
      // XHR Data
      // ------------------------
      var dh = dataHdlr()

      function get_tnd_data(action) {

        let url = `${url_srv}/tnd/xhr`;

        if ( typeof action != 'undefined') {
          //url += `?tbl=${action.tbl}&sensor=${action.sensor}`
          let query = new URLSearchParams(action).toString();
          url += '?' + query
        }

        var xhr = $.ajax({
              url: url,
              success: function(data){ 
                  if ( data['error'] ) {
                    this.error(this.xhr,this.textStatus,data['error'])
                    return
                  }

                  spinner(data.time)

                  let nodata_id = document.getElementById("nodata")
                  if (data.timeSeries || data.dr) {
                    nodata_id.innerHTML = ""
                    plotTnd(data)
                  }
                  else {
                    nodata_id.innerHTML = "No Data"
                    console.log(nodata_id)
                  }

                  dh.process(data)

              },
              complete: function(){
                  clearTimeout(timeoutId)
                  timeoutId = setTimeout(get_tnd_data,90000,action)
              },
              error: function (jqXhr, textStatus, errorMessage) {
                  console.error('Ajax Error! ' + errorMessage);
              },
              timeout:50000,
              dataType: 'json',        
        });
      }

      // ------------------------
      // -- Plot functions ----- 
      // ------------------------
      function plotTnd(data) {
      
        let traceLst = []
        if (data.dr) {
          
          for (const [sen, dataLst] of Object.entries(data.dr)) {

            traceLst.push( {
              x: dataLst[0],
              y: dataLst[1],
              name: sen + (' (r)'),
              mode: 'lines+markers',
              type: 'scatter',
            })
          }

        } 
        else {
          
          for (const [sen, dataSen] of Object.entries(data.sensors)) {

            //data.timeSeries = data.timeSeries.map((d)=>{return Date(d)})

            traceLst.push( {
              x: data.timeSeries,
              y: dataSen,
              name: sen,
              mode: 'lines+markers',
              type: 'scatter',
            })
          }

        }

        var layout = {
          showlegend: true,
          xaxis: {
            autorange: true
          },
          yaxis: {
            rangemode: 'tozero',
            autorange: true
          }
        }  

        Plotly.newPlot('plot', traceLst, layout);
      }              

    })

